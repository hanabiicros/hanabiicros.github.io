<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>PicGo+GitHub免费图床工具</title>
      <link href="/archives/b29ed1f0/"/>
      <url>/archives/b29ed1f0/</url>
      
        <content type="html"><![CDATA[<p>PicGo+GitHub让你的md文档起飞</p><a id="more"></a><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>我在前几篇博客中提到过，如何在markdown文件中插入图片。要么是按照markdown自己的方式，使用<strong>![]()</strong>的方式，要么使用Hexo提供的<strong>标签插件</strong>。但是他们的本质都是根据图片的path，从本地中取出。这种获取图片的方式存在一个问题，即当我们更换工作环境之后，我们除了要将md文档复制过去，还要连同本地图片一起附带过去。</p><p>虽然我们可以将图片一起上传到Github上，但是这种方式无法做到对图片的统一管理。因此<strong>图床</strong>这个工具就派上大用场。<strong>图床</strong>，即<strong>自动把本地图片转换成链接</strong>的一款工具。</p><p>这次我们介绍一款非常优秀的图床工具——<strong>PicGo</strong>，它支持微博、七牛云、腾讯云COS、又拍云、GitHub、阿里云OSS、SM.MS、Imgur等8种常用图床，功能强大、界面美观、简单易用。(<del>不过有时会突然冒出一些无厘头的bug</del>)</p><p>我使用的是PicGo+GitHub，若使用其他图床工具可自行探索。</p><p>更新：用了一段时间，发现GitHub图床不太行|ω・），上传速度慢，而且经常失败。后来改用了Gitee，这篇文档就当了解吧，而且Gitee图床和GitHub图床配置差不多</p><h2 id="创建GitHub图床"><a href="#创建GitHub图床" class="headerlink" title="创建GitHub图床"></a>创建GitHub图床</h2><h3 id="注册GitHub账号"><a href="#注册GitHub账号" class="headerlink" title="注册GitHub账号"></a>注册GitHub账号</h3><h3 id="创建Repository"><a href="#创建Repository" class="headerlink" title="创建Repository"></a>创建Repository</h3><p>前两步比较简单，注意创建仓库时，用README初始化仓库</p><h3 id="生成Token"><a href="#生成Token" class="headerlink" title="生成Token"></a>生成Token</h3><p>点击个人头像中的”Settings”，选中个人设置中的最下面一个按钮”Developer settings”</p><p><img src="https://gitee.com/zhangyaobin123/cdn/raw/master/img/20200403195822.png" alt></p><p>然后点击”Personal access tokens”，选中”Generate new token”，生成新的令牌</p><p><img src="https://gitee.com/zhangyaobin123/cdn/raw/master/img/20200403200339.png" alt></p><p>然后选择repo权限，名称随意即可</p><p><img src="https://gitee.com/zhangyaobin123/cdn/raw/master/img/20200403200546.png" alt></p><p>(令牌生成后，只会出现一次，请将它复制下来并保存好)</p><h2 id="配置PicGo"><a href="#配置PicGo" class="headerlink" title="配置PicGo"></a>配置PicGo</h2><h3 id="安装PicGo"><a href="#安装PicGo" class="headerlink" title="安装PicGo"></a>安装PicGo</h3><p>首先，你需要到GitHub上的<a href="https://github.com/Molunerfinn/PicGo/releases">PicGo项目</a>中下载可执行文件。若是mac系统，选择dmg后缀的文件，若是window，选择exe后缀的文件。</p><p><img src="https://gitee.com/zhangyaobin123/cdn/raw/master/img/20200402224805.png" alt="图1"></p><p>GitHub上下载资源可能会遇到网页无法访问或下载速度过慢的问题，这时候我只能说一句：“<strong>迅雷</strong>是个好东西”(ಡωಡ) 安装了迅雷的同学，直接右键使用迅雷下载即可，速度非常快。</p><h3 id="PicGo上配置GitHub图床"><a href="#PicGo上配置GitHub图床" class="headerlink" title="PicGo上配置GitHub图床"></a>PicGo上配置GitHub图床</h3><p><img src="https://gitee.com/zhangyaobin123/cdn/raw/master/img/20200403201635.png" alt></p><p>仓库名的设置按照”用户名/仓库名”的格式，比如我的用户名为”hanabiicros”，仓库名为”cdn”；</p><p>分支名填”master”即可；</p><p>Token中将刚刚创建的令牌粘贴在这里即可；</p><p>存储路径随意；</p><p>自定义域名按照”<a href="https://raw.githubusercontent.com/用户名/仓库名/master&quot;的格式填写，记住一定要加master，不加master会导致生成的图片链接无法访问到">https://raw.githubusercontent.com/用户名/仓库名/master&quot;的格式填写，记住一定要加master，不加master会导致生成的图片链接无法访问到</a></p><h3 id="PicGo设置"><a href="#PicGo设置" class="headerlink" title="PicGo设置"></a>PicGo设置</h3><p><img src="https://gitee.com/zhangyaobin123/cdn/raw/master/img/20200403202652.png" alt></p><p>在设置中，可以点开日志文件，用来查看报错信息；可以修改快捷键等。建议开启<strong>时间戳重命名</strong>，这样可以防止上传两张同名图片而导致上传失败。</p>]]></content>
      
      
      <categories>
          
          <category> 技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> PicGo </tag>
            
            <tag> GitHub </tag>
            
            <tag> 图床 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Markdown基本语法</title>
      <link href="/archives/5d36ff15/"/>
      <url>/archives/5d36ff15/</url>
      
        <content type="html"><![CDATA[<p>初学markdown时踩过的坑…</p><a id="more"></a><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a><strong>前言</strong></h2><p>　　不得不承认，在写这篇文章前，我对markdown的使用仅仅停留在如何显示标题、链接、图片以及如何加代码块。<br>　　一开始我以为这点就够了，不过当我编辑<strong>关于</strong>页面时，我ku了。由于网上教程有些坑，加之官网的描述不甚详细，因此我决定结合我的亲身试验，对其进行总结<br><br></p><h2 id="Markdown介绍"><a href="#Markdown介绍" class="headerlink" title="Markdown介绍"></a><strong>Markdown介绍</strong></h2><p>　　Markdown 是一种<strong>轻量级标记语言</strong>，它允许人们使用易读易写的纯文本格式编写文档。Markdown 编写的文档可以导出 HTML 、Word、图像、PDF、Epub 等多种格式的文档。当前许多网站都广泛使用 Markdown 来撰写帮助文档或是用于论坛上发表消息。例如：GitHub、简书、reddit、Diaspora、Stack Exchange、OpenStreetMap 、SourceForge等。<strong>(ps:摘自菜鸟教程)<del>个人感觉菜鸟教程更新的不够及时</del></strong><br><br></p><h2 id="标题"><a href="#标题" class="headerlink" title="标题"></a><strong>标题</strong></h2><p>　　标题有一级到六级之分，以’#’的数量区分。一个’#’是一级标题，两个’#’是二级标题，以此类推。不过这个说白了就是加粗、加大，html实现也挺容易的。</p><p>eg:</p><blockquote><p>### 三级标题  </p><h3 id="三级标题"><a href="#三级标题" class="headerlink" title="三级标题"></a>三级标题</h3><p>#### 四级标题</p><h4 id="四级标题"><a href="#四级标题" class="headerlink" title="四级标题"></a>四级标题</h4></blockquote><br><h2 id="字体"><a href="#字体" class="headerlink" title="字体"></a><strong>字体</strong></h2><p>　　<strong>斜体</strong>：将文字用<strong>一个</strong>*号包起来<br>　　<strong>加粗</strong>：将文字用<strong>两个</strong>*号包起来<br>　　<strong>斜体＆加粗</strong>：将文字用<strong>三个</strong>*号包起来<br>　　<strong>分隔线</strong>：用<strong>三个以上</strong>的’*‘、’-‘或’_’来建立一行分隔线<br>　　<strong>删除线</strong>：将文字用<strong>两个~</strong>号包起来<br>　　不过你也可以选择用html标签代替<del>(那你还用啥子markdown喽)</del></p><p>eg:</p><blockquote><p>*斜体*<br><em>斜体</em></p><p>**加粗**<br><strong>加粗</strong></p><p>***斜体&amp;粗体***<br><strong><em>斜体&amp;粗体</em></strong></p><p>~~删除线~~<br><del>删除线</del></p></blockquote><p><strong>分隔线</strong></p><pre><code>**** * *****</code></pre><hr><hr><hr><br><h2 id="段落"><a href="#段落" class="headerlink" title="段落"></a><strong>段落</strong></h2><p>　　缩进：在<strong>全角</strong>模式下用空格进行缩进<br>　　换行：行尾加上两个及以上的空格然后换行；或者直接硬换行，敲个回车键。若要中间空多行可以输入多个<strong>&lt;br/&gt;</strong><br><br></p><h2 id="引用"><a href="#引用" class="headerlink" title="引用"></a><strong>引用</strong></h2><p>　　需要引用文字，可以在其前加<strong>&gt;</strong>即可，而且支持嵌套</p><p>eg:</p><pre><code>&gt;这是引用的内容&gt;&gt;这是引用的内容的&apos;弟弟&apos;</code></pre><blockquote><p>这是引用的内容</p><blockquote><p>这是引用的内容的’弟弟’</p></blockquote></blockquote><br><h2 id="图片"><a href="#图片" class="headerlink" title="图片"></a><strong>图片</strong></h2><p>　　要插入图片，形式如下：</p><pre><code>![alt](图片地址)![alt](图片地址 &quot;title属性&quot;)</code></pre><p>　　其中，’[]’中的<strong>alt</strong>填图片的说明文字，如”图1”之类的，”title属性”可加可不加，当鼠标hover时展示的信息</p><p>eg:</p><blockquote><p>![图1](wlop01.jpg)</p></blockquote><p><img src="https://gitee.com/zhangyaobin123/cdn/raw/master/img/20200403205514.jpg" alt="图1"><br><br></p><h2 id="链接"><a href="#链接" class="headerlink" title="链接"></a><strong>链接</strong></h2><p>　　插入链接，形式如下：</p><pre><code>[链接名称](链接地址)</code></pre><p>eg:</p><pre><code>[百度](https://www.baidu.com)</code></pre><blockquote><p><a href="https://www.baidu.com">百度</a></p></blockquote><br><h2 id="列表"><a href="#列表" class="headerlink" title="列表"></a><strong>列表</strong></h2><p>　　<strong>无序列表</strong><br>　　在每个列表项之前加’+’、’-‘或’*‘即可，而且列表项与之前的符号之间必须有<strong>一个空格</strong></p><p>eg:</p><pre><code>+ 列表1- 列表2* 列表3</code></pre><blockquote><ul><li>列表1</li></ul><ul><li>列表2</li></ul><ul><li>列表3</li></ul></blockquote><p>　　<strong>有序列表</strong><br>　　列表项前用数字&amp;’.’表示</p><p>eg:</p><pre><code>1. 列表12. 列表23. 列表3</code></pre><blockquote><ol><li>列表1</li><li>列表2</li><li>列表3</li></ol></blockquote><p>　　<strong>列表嵌套</strong><br>　　在子列表的每一项前添加四个空格即可</p><p>eg:</p><pre><code>1.第一项    + 第一项嵌套的第一个元素    + 第一项嵌套的第二个元素</code></pre><blockquote><ol><li>第一项<ul><li>第一项嵌套的第一个元素</li><li>第一项嵌套的第二个元素</li></ul></li></ol></blockquote><br><h2 id="表格"><a href="#表格" class="headerlink" title="表格"></a><strong>表格</strong></h2><p>　　表格用’|’来分隔不同的单元格，使用’-‘来分隔表头和其他行，而且’:-‘表示左对齐，’-:’表示右对齐，’:-:’表示居中对齐</p><p>eg:</p><pre><code>| 左对齐 | 右对齐 | 居中对齐 || :--| ----: | :----: || 单元格 | 单元格 | 单元格 || 单元格 | 单元格 | 单元格 |</code></pre><table><thead><tr><th align="left">左对齐</th><th align="right">右对齐</th><th align="center">居中对齐</th></tr></thead><tbody><tr><td align="left">单元格</td><td align="right">单元格</td><td align="center">单元格</td></tr><tr><td align="left">单元格</td><td align="right">单元格</td><td align="center">单元格</td></tr></tbody></table><p>　　额，应该是这个icrsus主题的设置，忽略了表格的竖线，不过也挺好看的<br><br></p><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a><strong>代码</strong></h2><p>　　<strong>单行代码</strong><br>　　代码之间用反引号包起来<br>eg：</p><pre><code>`int a = 10;`</code></pre><p>　　<code>int a = 10;</code></p><p>　　<strong>代码块</strong><br>　　代码之间用三个反引号包起来，且反引号独占一行<br>eg:</p><pre><code>(```)  code(```)</code></pre><figure class="highlight clean"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">code</span></span><br></pre></td></tr></table></figure><p>　　那两个小括号是为了防止其转译多加的，实际使用应去掉</p><pre><code>写到这里，也就差不多了，markdown的基本使用都介绍了，我得去修改前几篇博客的样式了(ಥ_ಥ)</code></pre><p>​    </p>]]></content>
      
      
      <categories>
          
          <category> 技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Markdown </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>前端面试题汇总——HTML篇</title>
      <link href="/archives/f0ff53b5/"/>
      <url>/archives/f0ff53b5/</url>
      
        <content type="html"><![CDATA[<p>汇集了各个大佬的成果～(￣▽￣～)~</p><a id="more"></a><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a><strong>前言</strong></h2><p>　　最近许多大厂都开启了暑期实习生招聘，看着大佬们一个个offer拿到手软，真想<del>扇自己两巴掌</del>。因此菜菜的我决定对面试题进行汇总，并且对自己的不足之处进行巩固，有备无患嘛。(主要来源：<a href="https://github.com/yisainan/web-interview/">https://github.com/yisainan/web-interview/</a>)</p><h2 id="简述对HTML语义化的理解"><a href="#简述对HTML语义化的理解" class="headerlink" title="简述对HTML语义化的理解"></a><strong>简述对HTML语义化的理解</strong></h2><p>　　1. <strong>用正确的标签做正确的事情</strong><br>　　2. HTML语义化让页面的<strong>内容结构化，结构更清晰</strong>，便于对浏览器、搜索引擎解析；即使在没有样式CSS情况下也以一种文档格式显示，并且容易阅读<br>　　3. 搜索引擎的爬虫也依赖于HTML标记来确定上下文和各个关键字的权重，<strong>利于SEO</strong><br>　　4. 使阅读网页源码的人能更容易将网站分块，<strong>便于阅读、维护以及理解</strong><br><br></p><h2 id="label标签作用以及使用方法"><a href="#label标签作用以及使用方法" class="headerlink" title="label标签作用以及使用方法"></a><strong>label标签作用以及使用方法</strong></h2><p>　　1. label标签用来定义表单控制间的关系，<strong>当用户选择该标签时，浏览器会自动将焦点转到和标签相关的表单控件上</strong><br>　　2. 使用方法：<strong>一种是id绑定，一种是嵌套</strong><br>eg:</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">"Name"</span>&gt;</span>Number:<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">name</span>=<span class="string">"Name"</span> <span class="attr">id</span>=<span class="string">"Name"</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">label</span>&gt;</span>Date:<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">name</span>=<span class="string">"B"</span>/&gt;</span><span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br></pre></td></tr></table></figure><br><h2 id="iframe框架有哪些优缺点"><a href="#iframe框架有哪些优缺点" class="headerlink" title="iframe框架有哪些优缺点"></a><strong>iframe框架有哪些优缺点</strong></h2><p><strong>优点：</strong><br>　　1. iframe能够原封不动的把嵌入的网页展示出来<br>　　2. 如果有多个网页引用iframe，那么只需修改iframe的内容，就可以实现调用的每一个页面内容的更改，方便快捷<br>　　3. 网页如果为了统一风格，header和footer都一样的，就可以写成一个页面，用iframe来嵌套，可以增加代码的可重用性<br>　　4. 如果遇到加载缓慢的第三方内容如图标和广告，这些问题可以由iframe解决</p><p><strong>缺点：</strong><br>　　1. 框架结构中出现各种滚动条<br>　　2. iframe会阻塞主页面的Onload事件，拖慢网页加载<br>　　3. 搜索引擎的检索程序无法解读这种页面，不利于SEO<br>　　4. iframe和主页面共享连接池，而浏览器对相同域的连接有限制，所以会影响页面的并行加载</p><br><h2 id="HTML与XHTML有什么区别，推荐哪个"><a href="#HTML与XHTML有什么区别，推荐哪个" class="headerlink" title="HTML与XHTML有什么区别，推荐哪个"></a><strong>HTML与XHTML有什么区别，推荐哪个</strong></h2><p>　　推荐使用XHTML，因为XHTML是XML重写了HTML的规范，比HTML更加严格，表现如下：<br>　　1. XHTML中所有的标签必须闭合<br>　　2. XHTML所有标签都必须使用小写<br>　　3. 所有的XML标记都必须合理嵌套<br>　　4. 所有的参数值都必须用引号””括起来<br>　　5. 把所有&lt;和&amp;特殊符号用编码表示<br>　　6. 给所有属性赋值<br>　　7. 不要在注释内容中使用”–”<br>　　8. 图片必须使用说明文字<br>　　ps:<del>HTML<strong>元素</strong>以开始标签起始，以结束标签终止</del><br><br></p><h2 id="HTML5的form如何关闭自动填充功能"><a href="#HTML5的form如何关闭自动填充功能" class="headerlink" title="HTML5的form如何关闭自动填充功能"></a><strong>HTML5的form如何关闭自动填充功能</strong></h2><p>　　将不想要自动完成的form或input设置为<strong>autocomplete=off</strong><br><br></p><h2 id="title与h1、b与strong、i与em的区别"><a href="#title与h1、b与strong、i与em的区别" class="headerlink" title="title与h1、b与strong、i与em的区别"></a><strong>title与h1、b与strong、i与em的区别</strong></h2><p>　　1. title用于网站信息标题，突出网站标题或关键字，一个网站可以有多个title，SEO权重高于h1；h1概括的是文章的主题，一个页面最好只用一个h1<br>　　2. b是为了加粗而加粗，strong是为了标明重点而加粗<br>　　3. i为了斜体而斜体，em为了标明重点而斜体，且对于搜索引擎来说strong和em比b和i重视的多<br><br></p><h2 id="描述下SEO中的TDK"><a href="#描述下SEO中的TDK" class="headerlink" title="描述下SEO中的TDK"></a><strong>描述下SEO中的TDK</strong></h2><p>　　在SEO中，所谓的TDK就是title(标题标签)、description(描述标签)、keywords(关键词标签)这三个标签<br><br></p><h2 id="HTML文件头中的DOCTYPE的作用"><a href="#HTML文件头中的DOCTYPE的作用" class="headerlink" title="HTML文件头中的DOCTYPE的作用"></a><strong>HTML文件头中的DOCTYPE的作用</strong></h2><p>　　1. 告知浏览器，文档使用的是哪种HTML或XHTML规范<br>　　2. 告诉浏览器按照何种规范(DTD)解析页面，若没有DOCTYPE声明，那么浏览器将按照自己的方式解析渲染页面<br><br></p><h2 id="简述一下src和href区别"><a href="#简述一下src和href区别" class="headerlink" title="简述一下src和href区别"></a><strong>简述一下src和href区别</strong></h2><p>　　src用于引用资源，替换当前元素；href用于在当前文档和引用资源之间确立联系。<br>　　<strong>href:</strong><br>　　href标识超文本引用，用在link和a等标签上，是在当前元素和引用资源之间建立联系。若在文档中添加href，浏览器会识别该文档为CSS文件，就会并行下载资源并且不会停止对当前文档的处理。因此<strong>建议使用link方式加载CSS，而不是使用@import方式</strong><br>　　<strong>src:</strong><br>　　src表示引用资源，替换当前元素，用在img,script,iframe上。当浏览器解析到src，会暂停其他资源的下载和处理(图片不会)，直到将该资源加载、编译、执行完毕，类似于将所有资源引用到当前内容。因此<strong>建议把js脚本放在底部而不是头部</strong><br><br></p><h2 id="严格模式与混杂模式"><a href="#严格模式与混杂模式" class="headerlink" title="严格模式与混杂模式"></a><strong>严格模式与混杂模式</strong></h2><p>　　严格模式：以浏览器支持的最高标准运行<br>　　混杂模式：页面以宽松向下兼容的方式显示，模拟老式浏览器的行为<br><br></p><h2 id="对WEB标准以及W3C的理解"><a href="#对WEB标准以及W3C的理解" class="headerlink" title="对WEB标准以及W3C的理解"></a><strong>对WEB标准以及W3C的理解</strong></h2><p>　　WEB标准简单来说可以分为<strong>结构、表现和行为</strong>。其中结构主要由HTML标签组成。表现即指CSS样式表。行为指页面和用户具有一定的交互，同时页面结构或者表现发生变化，主要由js组成<br>　　WEB标准一般是将该三部分独立分开，使其更具有模块化。但一般产生行为时，就会有结构或者表现的变化，也使得这三者的界限并不那么清晰<br>　　W3C对WEB标准提出了规范化的要求，也就是在实际编程中的一些代码规范。包含如下几点：<br>　　1. 对于结构要求：<br>　　　　1. 标签字母要小写<br>　　　　2. 标签要闭合<br>　　　　3. 标签不允许随意嵌套<br>　　2. 对于CSS和js要求：<br>　　　　1. 尽量使用外联CSS样式表和js脚本。将结构、表现和行为分为三块。同时提高页面渲染速度，提高用户体验。<br>　　　　2. 样式尽量少用行间样式表，使结构和表现分离，标签的id和class等属性命名要做到见文知意，标签越少，加载越快，代码维护简单，便于改版<br>　　　　3. 不需要变动页面内容，便可提供打印版本而不需要复制内容<br><br></p><h2 id="列举IE与其他浏览器不一样的特性"><a href="#列举IE与其他浏览器不一样的特性" class="headerlink" title="列举IE与其他浏览器不一样的特性"></a><strong>列举IE与其他浏览器不一样的特性</strong></h2><p>　　1. IE的排版引擎是Trident<br>　　2. Trident内核曾经几乎与W3C标准脱节<br>　　3. Trident内核的大量bug等安全性问题没有得到及时解决<br>　　4. js方面有很多独立的方法，例如绑定事件的attachEvent、创建事件的createEventObject等<br>　　5. CSS方面，也有自己独立的处理方式，例如设置透明，低版本IE中使用滤镜的方式<br><br></p><h2 id="前端页面由哪三层构成，及作用"><a href="#前端页面由哪三层构成，及作用" class="headerlink" title="前端页面由哪三层构成，及作用"></a><strong>前端页面由哪三层构成，及作用</strong></h2><p>　　分别是结构层、表示层、行为层<br>　　<strong>结构层：</strong><br>　　由HTML或XHTML之类的标记语言负责创建。标签对网页内容的语义含义做出了描述，但这些标签不包含任何关于如何显示有关内容的信息。<br>　　<strong>表示层：</strong><br>　　由CSS负责创建，CSS对”如何显示有关内容”的问题做出了回答<br>　　<strong>行为层：</strong><br>　　负责回答”内容应该如何对事件做出反应”这一问题，这是javascript和DOM主宰的领域<br><br></p><h2 id="网页验证码是干嘛的"><a href="#网页验证码是干嘛的" class="headerlink" title="网页验证码是干嘛的"></a><strong>网页验证码是干嘛的</strong></h2><p>　　1. 区分用户是计算机还是人的公共全自动程序。可以防止恶意破解密码、刷票、论坛灌水<br>　　2. 有效防止黑客对某一个特定注册用户用特定程序暴力破解方式进行不断的登录尝试<br><br></p><h2 id="为什么用多个域名存储网站资源更有效"><a href="#为什么用多个域名存储网站资源更有效" class="headerlink" title="为什么用多个域名存储网站资源更有效"></a><strong>为什么用多个域名存储网站资源更有效</strong></h2><p>　　1. CDN缓存更方便 <del>CDN边缘节点缓存主要解决网络延迟问题</del><br>　　2. 突破浏览器并发限制<br>　　3. 节约cookie带宽<br>　　4. 节约主域名的连接数，优化页面响应速度<br>　　5. 防止不必要的安全问题</p>]]></content>
      
      
      <categories>
          
          <category> 面试 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 前端 </tag>
            
            <tag> HTML </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>基于Hexo创建博客(进阶篇)</title>
      <link href="/archives/413d9fe2/"/>
      <url>/archives/413d9fe2/</url>
      
        <content type="html"><![CDATA[<p>这是对基础篇的补充，方便了解Hexo，并对其进行个性化配置</p><a id="more"></a><h2 id="Hexo基本配置"><a href="#Hexo基本配置" class="headerlink" title="Hexo基本配置"></a><strong>Hexo基本配置</strong></h2><h3 id="config-yml配置文件"><a href="#config-yml配置文件" class="headerlink" title="_config.yml配置文件"></a>_config.yml配置文件</h3><p>　　该文件中是整个’Hexo’框架的配置文件，下面对其部分参数信息进行描述.</p><h4 id="Site"><a href="#Site" class="headerlink" title="Site"></a>Site</h4><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">title:</span> <span class="string">icrosの小窝</span></span><br><span class="line"><span class="attr">subtitle:</span> <span class="string">''</span></span><br><span class="line"><span class="attr">description:</span> <span class="string">'帅斌的博客'</span></span><br><span class="line"><span class="attr">keywords:</span></span><br><span class="line"><span class="attr">author:</span> <span class="string">Yaobin</span> <span class="string">Zhang</span></span><br><span class="line"><span class="attr">language:</span> <span class="string">zh-CN</span></span><br><span class="line"><span class="attr">timezone:</span> <span class="string">''</span></span><br></pre></td></tr></table></figure><pre><code>-&apos;title&apos;：网站的标题-&apos;subtitle&apos;：网站的副标题-&apos;description&apos;：网站的描述，用于SEO-&apos;keywords&apos;：网站的关键词-&apos;author&apos;：网站的作者-&apos;language&apos;：网站所使用的语言，默认是en，你可以改为&apos;zh-CN&apos;简体中文-&apos;timezone&apos;：网站的时区，默认使用你电脑的时区</code></pre><br><h4 id="URL"><a href="#URL" class="headerlink" title="URL"></a>URL</h4><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">url:</span> <span class="string">https://hanabiicros.github.io/</span></span><br><span class="line"><span class="attr">root:</span> <span class="string">/</span></span><br><span class="line"><span class="attr">permalink:</span> <span class="string">:year/:month/:day/:title/</span></span><br><span class="line"><span class="attr">permalink_defaults:</span></span><br><span class="line"><span class="attr">pretty_urls:</span></span><br><span class="line">  <span class="attr">trailing_index:</span> <span class="literal">true</span> </span><br><span class="line">  <span class="attr">trailing_html:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure><pre><code>-&apos;url&apos;：网址，如果你的网站是放在子路径下，则将其设置为&apos;http://yoursite.com/child&apos;-&apos;root&apos;：网站的根目录-&apos;permalink&apos;：文章的永久链接格式，即发布的文章在网站下生成的路径格式，默认是&apos;yoursite.com/year/month/day/title&apos;-&apos;pretty_urls&apos;：改写permalink的值来美化URL-&apos;pretty_urls.trailing_index&apos;：是否在永久链接中保留尾部的index.html-&apos;pretty_urls.trailing_html&apos;：是否在永久链接中保留尾部的.html</code></pre><br><h4 id="Directory"><a href="#Directory" class="headerlink" title="Directory"></a>Directory</h4><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">source_dir:</span> <span class="string">source</span></span><br><span class="line"><span class="attr">public_dir:</span> <span class="string">public</span></span><br><span class="line"><span class="attr">tag_dir:</span> <span class="string">tags</span></span><br><span class="line"><span class="attr">archive_dir:</span> <span class="string">archives</span></span><br><span class="line"><span class="attr">category_dir:</span> <span class="string">categories</span></span><br><span class="line"><span class="attr">code_dir:</span> <span class="string">downloads/code</span></span><br><span class="line"><span class="attr">i18n_dir:</span> <span class="string">:lang</span></span><br><span class="line"><span class="attr">skip_render:</span></span><br></pre></td></tr></table></figure><p>　　主要配置了各个文件夹的存放位置，另外’skip_render’表示跳过指定文件的渲染，即你可以使用自己的样式，一般默认即可。<br><br></p><h4 id="home-page-setting"><a href="#home-page-setting" class="headerlink" title="home page setting"></a>home page setting</h4><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">index_generator:</span></span><br><span class="line">  <span class="attr">path:</span> <span class="string">''</span></span><br><span class="line">  <span class="attr">per_page:</span> <span class="number">10</span></span><br><span class="line">  <span class="attr">order_by:</span> <span class="string">-date</span></span><br></pre></td></tr></table></figure><pre><code>-&apos;index_generator.path&apos;：指明博客主页的根路径-&apos;index_generator.per_page&apos;：每页显示的最多文章数-&apos;index_generator.order_by&apos;：文章的排序方式</code></pre><br><h4 id="Extensions"><a href="#Extensions" class="headerlink" title="Extensions"></a>Extensions</h4><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">theme:</span> <span class="string">icarus</span></span><br></pre></td></tr></table></figure><pre><code>-&apos;theme&apos;：当前主题名称-&apos;theme_config&apos;：主题的配置文件，会覆盖主题目录下的&apos;_config.yml&apos;中的配置-&apos;deploy&apos;：部署部分的设置</code></pre><p>　　其他配置默认即可，详细信息可见<a href="https://hexo.io/zh-cn/docs">官方文档</a><br><br></p><h2 id="Hexo基本操作"><a href="#Hexo基本操作" class="headerlink" title="Hexo基本操作"></a><strong>Hexo基本操作</strong></h2><h3 id="写作"><a href="#写作" class="headerlink" title="写作"></a>写作</h3><p>　　‘基础篇’中讲了用如下命令，新建一篇文章</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo new post <span class="string">'title'</span></span><br></pre></td></tr></table></figure><p>　　除了新建文章外，还可以新建页面’page’或者草稿’draft’</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">hexo new page <span class="string">'title'</span></span><br><span class="line">hexo new draft <span class="string">'title'</span></span><br></pre></td></tr></table></figure><p>　　其中新建的页面’page’的’title’，和你在导航栏中自定义的路径’/title’相匹配的。即点击导航栏的’title’按钮，会定位到这个页面中。<del>(ps:当初看官方文档的时候看到了这里，不过没仔细看，结果在’关于’页面卡了好久，不知道怎么加这个页面。han(lll￢ω￢))</del><br><br></p><h3 id="Front-matter"><a href="#Front-matter" class="headerlink" title="Front-matter"></a>Front-matter</h3><p>　　Front-matter是每个post中最上方以’—‘分割的区域，指定个别文件的变量</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">title:</span> <span class="string">基于Hexo创建博客(进阶篇)</span></span><br><span class="line"><span class="attr">date:</span> <span class="number">2020</span><span class="number">-03</span><span class="number">-26</span> <span class="number">22</span><span class="string">:08:31</span></span><br><span class="line"><span class="attr">thumbnail:</span> <span class="string">/images/wc01.jpg</span></span><br><span class="line"><span class="attr">toc:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">tags:</span>            <span class="comment">#标签</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">Hexo</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">Blog</span></span><br><span class="line"><span class="attr">categories:</span> <span class="string">技术</span></span><br><span class="line"><span class="meta">---</span></span><br></pre></td></tr></table></figure><pre><code>-&apos;title&apos;：标题-&apos;date&apos;：建立日期-&apos;updated&apos;：更新日期-&apos;tags&apos;：标签，网站会根据每篇文章的标签进行归类-&apos;categories&apos;：分类，同样网站会根据每篇文章所属分类进行归类-&apos;comments&apos;：开启文章的评论功能，不加默认开启-&apos;permalink&apos;：覆盖文章的网址</code></pre><p>　　另外’thumbnail’和’toc’是’icarus’主题特有的。<br><br></p><h3 id="资源插入"><a href="#资源插入" class="headerlink" title="资源插入"></a>资源插入</h3><h4 id="插入图片"><a href="#插入图片" class="headerlink" title="插入图片"></a>插入图片</h4><p>　　在Hexo 2之前，许多人是推荐安装’hexo-asset-image’，该插件貌似是解决了因常规的md语法和相对路径引用资源的方式造成在存档页和主页显示不正确的问题<del>(ps:因为我是一上手就直接体验icarus主题，因而没遇到这个问题，况且我还是最新版的Hexo呢)</del></p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">npm</span> <span class="string">install</span> <span class="string">https://github.com/CodeFalling/hexo-asset-image</span> <span class="string">--save</span></span><br></pre></td></tr></table></figure><p>　　然后在博客根目录下的’_config.yml’文件中将’post_asset_folder’属性设置为true，这样在每次创建新的文章时，他会自动在同目录下创建一个同名的文件夹，该文件夹用于存放与文章相关的资源。<br>　　接着用传统的md形式就能实现图片的插入</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">![title](xxx.jpg/png)</span></span><br></pre></td></tr></table></figure><p>　　但是我在官方提供的插件库中，并未找到’hexo-asset-image’，只有’hexo-asset’，不过提供的功能大致是一样的。<br><br></p><h4 id="标签插件"><a href="#标签插件" class="headerlink" title="标签插件"></a>标签插件</h4><p>　　除了上述方法，在Hexo 3中，官方提供了名为’标签插件’的东东</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&#123;%</span> <span class="string">asset_path</span> <span class="string">slug</span> <span class="string">%&#125;</span></span><br><span class="line"><span class="string">&#123;%</span> <span class="string">asset_img</span> <span class="string">slug</span> <span class="string">[title]</span> <span class="string">%&#125;</span></span><br><span class="line"><span class="string">&#123;%</span> <span class="string">asset_link</span> <span class="string">slug</span> <span class="string">[title]</span> <span class="string">%&#125;</span></span><br></pre></td></tr></table></figure><p>　　像这样也可以实现路径、图片、链接的插入，当然这个功能是很强大的，官方提供了’引用块’、’代码块’、’Image’、’Youtube’等的插入方式。<br>对于码农而言，主要用到的还是代码块的插入。一般使用，只需指明使用的语言’lang:’即可，而且它默认显示行号。</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&#123;%</span> <span class="string">codeblock</span> <span class="string">[title]</span> <span class="string">[lang:language]</span> <span class="string">[url]</span> <span class="string">[link</span> <span class="string">text]</span> <span class="string">[additional</span> <span class="string">options]</span> <span class="string">%&#125;</span></span><br><span class="line"><span class="string">code</span> <span class="string">snippet</span></span><br><span class="line"><span class="string">&#123;%</span> <span class="string">endcodeblock</span> <span class="string">%&#125;</span></span><br></pre></td></tr></table></figure><p>　　还有一种就是用反引号的形式(格式问题，不能换行只能放在一行，实际使用将代码和第二个反引号换行)</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">``` [language] [title] [url] [link <span class="built_in">text</span>] code snippet```</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hexo </tag>
            
            <tag> Blog </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>基于Hexo创建博客(基础篇)</title>
      <link href="/archives/5ec59427/"/>
      <url>/archives/5ec59427/</url>
      
        <content type="html"><![CDATA[<p>这只是个最基础的教程，参考了知乎上“洪卫”dl的文章——“Hexo+Github: 个人博客网站搭建完全教程(看这篇就够了)”。</p><p>其他各种自定义配置详见“大佬”的教程（｡ò ∀ ó｡）</p><a id="more"></a><h2 id="安装Git"><a href="#安装Git" class="headerlink" title="安装Git"></a><strong>安装Git</strong></h2><p>　　Git作为目前世界上最先进的<strong>分布式版本控制系统</strong>，拥有强大的项目版本管理能力。<del>(ps:不过我暂时还没去深入了解，(lll￢ω￢))</del></p><p>　　Windows直接到官网下载就行，Linux的话直接一行shell命令解决</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install git</span><br></pre></td></tr></table></figure><h2 id="安装Node-js"><a href="#安装Node-js" class="headerlink" title="安装Node.js"></a><strong>安装Node.js</strong></h2><p>　　因为’Hexo’是基于’Node.js’编写的，所以需要先安装’Node.js’以及包管理工具’npm’</p><p>　　同样Windows到官网下载，无脑安装即可，Linux还是命令行安装</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install nodejs</span><br><span class="line">sudo apt-get install npm</span><br></pre></td></tr></table></figure><h2 id="安装Hexo"><a href="#安装Hexo" class="headerlink" title="安装Hexo"></a><strong>安装Hexo</strong></h2><p>　　前两个工具安装完毕之后，就可以安装’Hexo’了。<br>　　先创建一个文件夹用于存放博客文件，我是放在’D:\Study\MyBlog’下。接着在该目录下右键点击’Git Bash Here’,打开’git’的控制台窗口。输入如下命令全局安装hexo脚手架：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install -g hexo-cli</span><br></pre></td></tr></table></figure><p>　　安装完成后，可以输入’hexo -v’检查是否安装成功</p><h3 id="Hexo初始化自己的网站"><a href="#Hexo初始化自己的网站" class="headerlink" title="Hexo初始化自己的网站"></a>Hexo初始化自己的网站</h3><p>　　在git控制台输入：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo init BinBlog</span><br></pre></td></tr></table></figure><p>　　初始化自己网站，其中’BinBlog’是我自己命名的博客网站名称，可随意命名</p><h3 id="安装依赖项"><a href="#安装依赖项" class="headerlink" title="安装依赖项"></a>安装依赖项</h3><p>　　进入刚创建的博客目录，安装依赖项。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> BinBlog</span><br><span class="line">npm i</span><br></pre></td></tr></table></figure><p>　　安装完毕后，在响应的博客目录下，可以看到如下文件夹：</p><pre><code>-&apos;node_modules&apos;:依赖包-&apos;public&apos;:存放生成的页面，包括html、css、js等-&apos;scaffolds&apos;:生成文章的一些模板，比如草稿md、页面md以及文章md-&apos;source&apos;:存放你写的文章以及你需要自己添加的一些资源文件-&apos;themes&apos;:主题文件，Hexo有多种主题，默认使用的是&apos;landscape&apos;主题-&apos;_config.yml&apos;:博客的配置文件，其中可以配置网站的各种属性，之后再说</code></pre><h3 id="预览默认博客页面"><a href="#预览默认博客页面" class="headerlink" title="预览默认博客页面"></a>预览默认博客页面</h3><p>　　输入’hexo g’生成静态页面，然后输入’hexo s’打开本地服务器</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">hexo g</span><br><span class="line">hexo s</span><br></pre></td></tr></table></figure><p>　　服务器会开放4000端口，浏览器打开’localhost:4000/‘可以看到默认的博客页面。<br>　　emmmm，不得不说这个默认的页面感觉有点丑，不过不要紧，后续我会提供本网站所使用的主题icarus的教程。</p><h2 id="Github上创建个人仓库"><a href="#Github上创建个人仓库" class="headerlink" title="Github上创建个人仓库"></a><strong>Github上创建个人仓库</strong></h2><p>在如图1位置’New repository’，新建个人仓库<br><img src="https://gitee.com/zhangyaobin123/cdn/raw/master/img/20200403205753.png" alt="图1"><br>然后在’Repository name’字段处填自己的github账号名称+’github.io’，这样当部署到’yourname.github.io’网址时，才会识别到你的仓库，另外在初始化时附带上README。如图2所示<br><img src="https://gitee.com/zhangyaobin123/cdn/raw/master/img/20200403205958.png" alt="图2"></p><h2 id="生成SSH并添加到Github"><a href="#生成SSH并添加到Github" class="headerlink" title="生成SSH并添加到Github"></a><strong>生成SSH并添加到Github</strong></h2><p>　　在git控制台输入如下命令</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git config --global user.name <span class="string">"yourname"</span></span><br><span class="line">git config --global user.email <span class="string">"youremail"</span></span><br></pre></td></tr></table></figure><p>　　全局设置到指定的Git仓库。网上给的设置邮箱的命令是：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git config --global At-Cost Domain Pricing - Domain Cost Club <span class="string">"youremail"</span></span><br></pre></td></tr></table></figure><p>　　但是我输入之后提示错误信息…</p><p>　　接着创建’SSH’，学过信息安全的应该都知道。说白了就是通过公私钥匹配，将你的文件上传到’GitHub’上。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh-keygen -t rsa -C <span class="string">"youremail"</span></span><br></pre></td></tr></table></figure><p>　　然后一般在你的’C:\Users\xxx&#39;目录下，会生成’.ssh’文件夹，里面有你的私钥和公钥。可能我之前生成过ssh，已经有了该目录，就不演示了。</p><p>　　接着将生成的公钥’id_rsa.pub’的内容复制到你的github上，如图3所示。<br><img src="https://gitee.com/zhangyaobin123/cdn/raw/master/img/20200403210234.png" alt="图3"><br>　　即在setting中的’SSH and GPG keys’中’New SSH key’，给其取个名字，然后将复制的公钥粘贴到此处。<br>　　在git控制台输入</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh -T git@github.com</span><br></pre></td></tr></table></figure><p>　　若出现你的用户名，即配置成功</p><h2 id="将hexo部署到GitHub上"><a href="#将hexo部署到GitHub上" class="headerlink" title="将hexo部署到GitHub上"></a><strong>将hexo部署到GitHub上</strong></h2><p>　　接着我们就可以将hexo生成的网页托管到GitHub上。</p><h3 id="修改’-config-yml’文件"><a href="#修改’-config-yml’文件" class="headerlink" title="修改’_config.yml’文件"></a>修改’_config.yml’文件</h3><p>　　打开博客根目录下的’_config.yml’配置文件，修改最后一行的配置：</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">deploy:</span></span><br><span class="line">  <span class="attr">type:</span> <span class="string">git</span></span><br><span class="line">  <span class="attr">repository:</span> <span class="string">https://github.com/hanabiicros/hanabiicros.github.io</span></span><br><span class="line">  <span class="attr">branch:</span> <span class="string">master</span></span><br></pre></td></tr></table></figure><p>　　‘repository’的位置填写自己的github地址即可。这样通过git命令上传的文件就会放到你的仓库中</p><h3 id="安装deploy-git"><a href="#安装deploy-git" class="headerlink" title="安装deploy-git"></a>安装deploy-git</h3><p>　　需要先安装部署的命令，才能用’git d’上传到’GitHub’</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-deployer-git --save</span><br></pre></td></tr></table></figure><p>　　然后执行如下命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">hexo c</span><br><span class="line">hexo g</span><br><span class="line">hexo d</span><br></pre></td></tr></table></figure><p>　　‘hexo c’即清除命令，这个命令还是挺好用的，如果你遇到一般的小bug，那就’hexo c’然后再执行。’hexo g’即生成静态网页，’hexo d’部署文章。若提示’Deploy done:git’即操作成功。之后就能在’yourname.github.io’网站上看到你的博客。</p><h2 id="写文章并发布"><a href="#写文章并发布" class="headerlink" title="写文章并发布"></a><strong>写文章并发布</strong></h2><p>　　完成了上述基本步骤之后，你如果就用默认的主题的话，那么你就可以开始撰写你的第一个’纯文本’博客了。之所以说是’纯文本’，是因为还有许多hexo插件没有介绍。具体内容将放在下一篇进行具体说明。<br>　　现在你需要做的就是在博客的根目录下输入</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo new post <span class="string">"arctile title"</span></span><br></pre></td></tr></table></figure><p>　　新建一篇文章，然后在博客根目录下的’source_posts’的目录下多了一个’xxx.md’的文件，这就是你刚刚创建的。接着就可以进入’vscode’中编辑’markdown’文件了。编写完后执行固定的这三个命令’hexo c’、’hexo g’、’hexo d’。你也可以在提交前先进行本地预览，输入</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo server</span><br></pre></td></tr></table></figure><p>　　到这里一个最基本的博客就搭建完毕了。下一篇会对里面的具体配置内容进行相关介绍，并进行个性化定制！</p>]]></content>
      
      
      <categories>
          
          <category> 技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hexo </tag>
            
            <tag> Github </tag>
            
            <tag> Blog </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
