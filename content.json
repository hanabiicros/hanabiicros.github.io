{"pages":[{"title":"About Me","text":"帅斌/斌哥/icros 华南理工大学17级本科生 ACG文化爱好者 腿控、xi(啊呸) 休伯利安舰长 薇尔莉特守护者(｡･ω･｡)ﾉ♡ 伊卡洛斯老公(⁄ ⁄•⁄ω⁄•⁄ ⁄) … 学习 前端初学者 了解html\\css\\js 了解Vue 了解Git 了解webpack 了解SSM hai，后悔当初没有早点搞个博客，很多都是自己上网零散着看的，没有总结，有些已经忘了|･ω･｀) 联系方式 email:zjk0718@163.com","link":"/about/index.html"}],"posts":[{"title":"基于Hexo创建博客(进阶篇)","text":"这是对基础篇的补充，方便了解Hexo，并对其进行个性化配置 Hexo基本配置_config.yml配置文件 该文件中是整个’Hexo’框架的配置文件，下面对其部分参数信息进行描述. Site1234567title: icrosの小窝subtitle: ''description: '帅斌的博客'keywords:author: Yaobin Zhanglanguage: zh-CNtimezone: '' -&apos;title&apos;：网站的标题 -&apos;subtitle&apos;：网站的副标题 -&apos;description&apos;：网站的描述，用于SEO -&apos;keywords&apos;：网站的关键词 -&apos;author&apos;：网站的作者 -&apos;language&apos;：网站所使用的语言，默认是en，你可以改为&apos;zh-CN&apos;简体中文 -&apos;timezone&apos;：网站的时区，默认使用你电脑的时区 URL1234567url: https://hanabiicros.github.io/root: /permalink: :year/:month/:day/:title/permalink_defaults:pretty_urls: trailing_index: true trailing_html: true -&apos;url&apos;：网址，如果你的网站是放在子路径下，则将其设置为&apos;http://yoursite.com/child&apos; -&apos;root&apos;：网站的根目录 -&apos;permalink&apos;：文章的永久链接格式，即发布的文章在网站下生成的路径格式，默认是&apos;yoursite.com/year/month/day/title&apos; -&apos;pretty_urls&apos;：改写permalink的值来美化URL -&apos;pretty_urls.trailing_index&apos;：是否在永久链接中保留尾部的index.html -&apos;pretty_urls.trailing_html&apos;：是否在永久链接中保留尾部的.html Directory12345678source_dir: sourcepublic_dir: publictag_dir: tagsarchive_dir: archivescategory_dir: categoriescode_dir: downloads/codei18n_dir: :langskip_render: 主要配置了各个文件夹的存放位置，另外’skip_render’表示跳过指定文件的渲染，即你可以使用自己的样式，一般默认即可。 home page setting1234index_generator: path: '' per_page: 10 order_by: -date -&apos;index_generator.path&apos;：指明博客主页的根路径 -&apos;index_generator.per_page&apos;：每页显示的最多文章数 -&apos;index_generator.order_by&apos;：文章的排序方式 Extensions1theme: icarus -&apos;theme&apos;：当前主题名称 -&apos;theme_config&apos;：主题的配置文件，会覆盖主题目录下的&apos;_config.yml&apos;中的配置 -&apos;deploy&apos;：部署部分的设置 其他配置默认即可，详细信息可见官方文档 Hexo基本操作写作 ‘基础篇’中讲了用如下命令，新建一篇文章 1hexo new post 'title' 除了新建文章外，还可以新建页面’page’或者草稿’draft’ 12hexo new page 'title'hexo new draft 'title' 其中新建的页面’page’的’title’，和你在导航栏中自定义的路径’/title’相匹配的。即点击导航栏的’title’按钮，会定位到这个页面中。(ps:当初看官方文档的时候看到了这里，不过没仔细看，结果在’关于’页面卡了好久，不知道怎么加这个页面。han(lll￢ω￢)) Front-matter Front-matter是每个post中最上方以’—‘分割的区域，指定个别文件的变量 12345678910---title: 基于Hexo创建博客(进阶篇)date: 2020-03-26 22:08:31thumbnail: /images/wc01.jpgtoc: truetags: #标签 - Hexo - Blogcategories: 技术--- -&apos;title&apos;：标题 -&apos;date&apos;：建立日期 -&apos;updated&apos;：更新日期 -&apos;tags&apos;：标签，网站会根据每篇文章的标签进行归类 -&apos;categories&apos;：分类，同样网站会根据每篇文章所属分类进行归类 -&apos;comments&apos;：开启文章的评论功能，不加默认开启 -&apos;permalink&apos;：覆盖文章的网址 另外’thumbnail’和’toc’是’icarus’主题特有的。 资源插入插入图片 在Hexo 2之前，许多人是推荐安装’hexo-asset-image’，该插件貌似是解决了因常规的md语法和相对路径引用资源的方式造成在存档页和主页显示不正确的问题(ps:因为我是一上手就直接体验icarus主题，因而没遇到这个问题，况且我还是最新版的Hexo呢) 1npm install https://github.com/CodeFalling/hexo-asset-image --save 然后在博客根目录下的’_config.yml’文件中将’post_asset_folder’属性设置为true，这样在每次创建新的文章时，他会自动在同目录下创建一个同名的文件夹，该文件夹用于存放与文章相关的资源。 接着用传统的md形式就能实现图片的插入 1![title](xxx.jpg/png) 但是我在官方提供的插件库中，并未找到’hexo-asset-image’，只有’hexo-asset’，不过提供的功能大致是一样的。 标签插件 除了上述方法，在Hexo 3中，官方提供了名为’标签插件’的东东 123{% asset_path slug %}{% asset_img slug [title] %}{% asset_link slug [title] %} 像这样也可以实现路径、图片、链接的插入，当然这个功能是很强大的，官方提供了’引用块’、’代码块’、’Image’、’Youtube’等的插入方式。对于码农而言，主要用到的还是代码块的插入。一般使用，只需指明使用的语言’lang:’即可，而且它默认显示行号。 123{% codeblock [title] [lang:language] [url] [link text] [additional options] %}code snippet{% endcodeblock %} 还有一种就是用反引号的形式(格式问题，不能换行只能放在一行，实际使用将代码和第二个反引号换行) 1``` [language] [title] [url] [link text] code snippet```","link":"/archives/413d9fe2/"},{"title":"Markdown基本语法","text":"初学markdown时踩过的坑… 前言 不得不承认，在写这篇文章前，我对markdown的使用仅仅停留在如何显示标题、链接、图片以及如何加代码块。 一开始我以为这点就够了，不过当我编辑关于页面时，我ku了。由于网上教程有些坑，加之官网的描述不甚详细，因此我决定结合我的亲身试验，对其进行总结 Markdown介绍 Markdown 是一种轻量级标记语言，它允许人们使用易读易写的纯文本格式编写文档。Markdown 编写的文档可以导出 HTML 、Word、图像、PDF、Epub 等多种格式的文档。当前许多网站都广泛使用 Markdown 来撰写帮助文档或是用于论坛上发表消息。例如：GitHub、简书、reddit、Diaspora、Stack Exchange、OpenStreetMap 、SourceForge等。(ps:摘自菜鸟教程)个人感觉菜鸟教程更新的不够及时 标题 标题有一级到六级之分，以’#’的数量区分。一个’#’是一级标题，两个’#’是二级标题，以此类推。不过这个说白了就是加粗、加大，html实现也挺容易的。 eg: ### 三级标题 三级标题#### 四级标题 四级标题 字体 斜体：将文字用一个*号包起来 加粗：将文字用两个*号包起来 斜体＆加粗：将文字用三个*号包起来 分隔线：用三个以上的’*‘、’-‘或’_’来建立一行分隔线 删除线：将文字用两个~号包起来 不过你也可以选择用html标签代替(那你还用啥子markdown喽) eg: *斜体*斜体 **加粗**加粗 ***斜体&amp;粗体***斜体&amp;粗体 ~~删除线~~删除线 分隔线 *** * * * **** 段落 缩进：在全角模式下用空格进行缩进 换行：行尾加上两个及以上的空格然后换行；或者直接硬换行，敲个回车键。若要中间空多行可以输入多个&lt;br/&gt; 引用 需要引用文字，可以在其前加&gt;即可，而且支持嵌套 eg: &gt;这是引用的内容 &gt;&gt;这是引用的内容的&apos;弟弟&apos; 这是引用的内容 这是引用的内容的’弟弟’ 图片 要插入图片，形式如下： ![alt](图片地址) ![alt](图片地址 &quot;title属性&quot;) 其中，’[]’中的alt填图片的说明文字，如”图1”之类的，”title属性”可加可不加，当鼠标hover时展示的信息 eg: ![图1](wlop01.jpg) 链接 插入链接，形式如下： [链接名称](链接地址)eg: [百度](https://www.baidu.com) 百度 列表 无序列表 在每个列表项之前加’+’、’-‘或’*‘即可，而且列表项与之前的符号之间必须有一个空格 eg: + 列表1 - 列表2 * 列表3 列表1 列表2 列表3 有序列表 列表项前用数字&amp;’.’表示 eg: 1. 列表1 2. 列表2 3. 列表3 列表1 列表2 列表3 列表嵌套 在子列表的每一项前添加四个空格即可 eg: 1.第一项 + 第一项嵌套的第一个元素 + 第一项嵌套的第二个元素 第一项 第一项嵌套的第一个元素 第一项嵌套的第二个元素 表格 表格用’|’来分隔不同的单元格，使用’-‘来分隔表头和其他行，而且’:-‘表示左对齐，’-:’表示右对齐，’:-:’表示居中对齐 eg: | 左对齐 | 右对齐 | 居中对齐 | | :--| ----: | :----: | | 单元格 | 单元格 | 单元格 | | 单元格 | 单元格 | 单元格 | 左对齐 右对齐 居中对齐 单元格 单元格 单元格 单元格 单元格 单元格 额，应该是这个icrsus主题的设置，忽略了表格的竖线，不过也挺好看的 代码 单行代码 代码之间用反引号包起来eg： `int a = 10;` int a = 10; 代码块 代码之间用三个反引号包起来，且反引号独占一行eg: (```) code (```)1code 那两个小括号是为了防止其转译多加的，实际使用应去掉 写到这里，也就差不多了，markdown的基本使用都介绍了，我得去修改前几篇博客的样式了(ಥ_ಥ)","link":"/archives/5d36ff15/"},{"title":"前端面试题汇总——HTML篇","text":"汇集了各个大佬的成果～(￣▽￣～)~ 前言 最近许多大厂都开启了暑期实习生招聘，看着大佬们一个个offer拿到手软，真想扇自己两巴掌。因此菜菜的我决定对面试题进行汇总，并且对自己的不足之处进行巩固，有备无患嘛。(主要来源：https://github.com/yisainan/web-interview/) 简述对HTML语义化的理解 1. 用正确的标签做正确的事情 2. HTML语义化让页面的内容结构化，结构更清晰，便于对浏览器、搜索引擎解析；即使在没有样式CSS情况下也以一种文档格式显示，并且容易阅读 3. 搜索引擎的爬虫也依赖于HTML标记来确定上下文和各个关键字的权重，利于SEO 4. 使阅读网页源码的人能更容易将网站分块，便于阅读、维护以及理解 label标签作用以及使用方法 1. label标签用来定义表单控制间的关系，当用户选择该标签时，浏览器会自动将焦点转到和标签相关的表单控件上 2. 使用方法：一种是id绑定，一种是嵌套eg: 1234&lt;label for=\"Name\"&gt;Number:&lt;/label&gt;&lt;input type=\"text\" name=\"Name\" id=\"Name\"&gt;&lt;label&gt;Date:&lt;input type=\"text\" name=\"B\"/&gt;&lt;/label&gt; iframe框架有哪些优缺点优点： 1. iframe能够原封不动的把嵌入的网页展示出来 2. 如果有多个网页引用iframe，那么只需修改iframe的内容，就可以实现调用的每一个页面内容的更改，方便快捷 3. 网页如果为了统一风格，header和footer都一样的，就可以写成一个页面，用iframe来嵌套，可以增加代码的可重用性 4. 如果遇到加载缓慢的第三方内容如图标和广告，这些问题可以由iframe解决 缺点： 1. 框架结构中出现各种滚动条 2. iframe会阻塞主页面的Onload事件，拖慢网页加载 3. 搜索引擎的检索程序无法解读这种页面，不利于SEO 4. iframe和主页面共享连接池，而浏览器对相同域的连接有限制，所以会影响页面的并行加载 HTML与XHTML有什么区别，推荐哪个 推荐使用XHTML，因为XHTML是XML重写了HTML的规范，比HTML更加严格，表现如下： 1. XHTML中所有的标签必须闭合 2. XHTML所有标签都必须使用小写 3. 所有的XML标记都必须合理嵌套 4. 所有的参数值都必须用引号””括起来 5. 把所有&lt;和&amp;特殊符号用编码表示 6. 给所有属性赋值 7. 不要在注释内容中使用”–” 8. 图片必须使用说明文字 ps:HTML元素以开始标签起始，以结束标签终止 HTML5的form如何关闭自动填充功能 将不想要自动完成的form或input设置为autocomplete=off title与h1、b与strong、i与em的区别 1. title用于网站信息标题，突出网站标题或关键字，一个网站可以有多个title，SEO权重高于h1；h1概括的是文章的主题，一个页面最好只用一个h1 2. b是为了加粗而加粗，strong是为了标明重点而加粗 3. i为了斜体而斜体，em为了标明重点而斜体，且对于搜索引擎来说strong和em比b和i重视的多 描述下SEO中的TDK 在SEO中，所谓的TDK就是title(标题标签)、description(描述标签)、keywords(关键词标签)这三个标签 HTML文件头中的DOCTYPE的作用 1. 告知浏览器，文档使用的是哪种HTML或XHTML规范 2. 告诉浏览器按照何种规范(DTD)解析页面，若没有DOCTYPE声明，那么浏览器将按照自己的方式解析渲染页面 简述一下src和href区别 src用于引用资源，替换当前元素；href用于在当前文档和引用资源之间确立联系。 href: href标识超文本引用，用在link和a等标签上，是在当前元素和引用资源之间建立联系。若在文档中添加href，浏览器会识别该文档为CSS文件，就会并行下载资源并且不会停止对当前文档的处理。因此建议使用link方式加载CSS，而不是使用@import方式 src: src表示引用资源，替换当前元素，用在img,script,iframe上。当浏览器解析到src，会暂停其他资源的下载和处理(图片不会)，直到将该资源加载、编译、执行完毕，类似于将所有资源引用到当前内容。因此建议把js脚本放在底部而不是头部 严格模式与混杂模式 严格模式：以浏览器支持的最高标准运行 混杂模式：页面以宽松向下兼容的方式显示，模拟老式浏览器的行为 对WEB标准以及W3C的理解 WEB标准简单来说可以分为结构、表现和行为。其中结构主要由HTML标签组成。表现即指CSS样式表。行为指页面和用户具有一定的交互，同时页面结构或者表现发生变化，主要由js组成 WEB标准一般是将该三部分独立分开，使其更具有模块化。但一般产生行为时，就会有结构或者表现的变化，也使得这三者的界限并不那么清晰 W3C对WEB标准提出了规范化的要求，也就是在实际编程中的一些代码规范。包含如下几点： 1. 对于结构要求： 1. 标签字母要小写 2. 标签要闭合 3. 标签不允许随意嵌套 2. 对于CSS和js要求： 1. 尽量使用外联CSS样式表和js脚本。将结构、表现和行为分为三块。同时提高页面渲染速度，提高用户体验。 2. 样式尽量少用行间样式表，使结构和表现分离，标签的id和class等属性命名要做到见文知意，标签越少，加载越快，代码维护简单，便于改版 3. 不需要变动页面内容，便可提供打印版本而不需要复制内容 列举IE与其他浏览器不一样的特性 1. IE的排版引擎是Trident 2. Trident内核曾经几乎与W3C标准脱节 3. Trident内核的大量bug等安全性问题没有得到及时解决 4. js方面有很多独立的方法，例如绑定事件的attachEvent、创建事件的createEventObject等 5. CSS方面，也有自己独立的处理方式，例如设置透明，低版本IE中使用滤镜的方式 前端页面由哪三层构成，及作用 分别是结构层、表示层、行为层 结构层： 由HTML或XHTML之类的标记语言负责创建。标签对网页内容的语义含义做出了描述，但这些标签不包含任何关于如何显示有关内容的信息。 表示层： 由CSS负责创建，CSS对”如何显示有关内容”的问题做出了回答 行为层： 负责回答”内容应该如何对事件做出反应”这一问题，这是javascript和DOM主宰的领域 网页验证码是干嘛的 1. 区分用户是计算机还是人的公共全自动程序。可以防止恶意破解密码、刷票、论坛灌水 2. 有效防止黑客对某一个特定注册用户用特定程序暴力破解方式进行不断的登录尝试 为什么用多个域名存储网站资源更有效 1. CDN缓存更方便 CDN边缘节点缓存主要解决网络延迟问题 2. 突破浏览器并发限制 3. 节约cookie带宽 4. 节约主域名的连接数，优化页面响应速度 5. 防止不必要的安全问题","link":"/archives/f0ff53b5/"},{"title":"基于Hexo创建博客(基础篇)","text":"这只是个最基础的教程，参考了知乎上“洪卫”dl的文章——“Hexo+Github: 个人博客网站搭建完全教程(看这篇就够了)”。 其他各种自定义配置详见“大佬”的教程（｡ò ∀ ó｡） 安装Git Git作为目前世界上最先进的分布式版本控制系统，拥有强大的项目版本管理能力。(ps:不过我暂时还没去深入了解，(lll￢ω￢)) Windows直接到官网下载就行，Linux的话直接一行shell命令解决 1sudo apt-get install git 安装Node.js 因为’Hexo’是基于’Node.js’编写的，所以需要先安装’Node.js’以及包管理工具’npm’ 同样Windows到官网下载，无脑安装即可，Linux还是命令行安装 12sudo apt-get install nodejssudo apt-get install npm 安装Hexo 前两个工具安装完毕之后，就可以安装’Hexo’了。 先创建一个文件夹用于存放博客文件，我是放在’D:\\Study\\MyBlog’下。接着在该目录下右键点击’Git Bash Here’,打开’git’的控制台窗口。输入如下命令全局安装hexo脚手架： 1npm install -g hexo-cli 安装完成后，可以输入’hexo -v’检查是否安装成功 Hexo初始化自己的网站 在git控制台输入： 1hexo init BinBlog 初始化自己网站，其中’BinBlog’是我自己命名的博客网站名称，可随意命名 安装依赖项 进入刚创建的博客目录，安装依赖项。 12cd BinBlognpm i 安装完毕后，在响应的博客目录下，可以看到如下文件夹： -&apos;node_modules&apos;:依赖包 -&apos;public&apos;:存放生成的页面，包括html、css、js等 -&apos;scaffolds&apos;:生成文章的一些模板，比如草稿md、页面md以及文章md -&apos;source&apos;:存放你写的文章以及你需要自己添加的一些资源文件 -&apos;themes&apos;:主题文件，Hexo有多种主题，默认使用的是&apos;landscape&apos;主题 -&apos;_config.yml&apos;:博客的配置文件，其中可以配置网站的各种属性，之后再说预览默认博客页面 输入’hexo g’生成静态页面，然后输入’hexo s’打开本地服务器 12hexo ghexo s 服务器会开放4000端口，浏览器打开’localhost:4000/‘可以看到默认的博客页面。 emmmm，不得不说这个默认的页面感觉有点丑，不过不要紧，后续我会提供本网站所使用的主题icarus的教程。 Github上创建个人仓库在如图1位置’New repository’，新建个人仓库然后在’Repository name’字段处填自己的github账号名称+’github.io’，这样当部署到’yourname.github.io’网址时，才会识别到你的仓库，另外在初始化时附带上README。如图2所示 生成SSH并添加到Github 在git控制台输入如下命令 12git config --global user.name \"yourname\"git config --global user.email \"youremail\" 全局设置到指定的Git仓库。网上给的设置邮箱的命令是： 1git config --global At-Cost Domain Pricing - Domain Cost Club \"youremail\" 但是我输入之后提示错误信息… 接着创建’SSH’，学过信息安全的应该都知道。说白了就是通过公私钥匹配，将你的文件上传到’GitHub’上。 1ssh-keygen -t rsa -C \"youremail\" 然后一般在你的’C:\\Users\\xxx'目录下，会生成’.ssh’文件夹，里面有你的私钥和公钥。可能我之前生成过ssh，已经有了该目录，就不演示了。 接着将生成的公钥’id_rsa.pub’的内容复制到你的github上，如图3所示。 即在setting中的’SSH and GPG keys’中’New SSH key’，给其取个名字，然后将复制的公钥粘贴到此处。 在git控制台输入 1ssh -T git@github.com 若出现你的用户名，即配置成功 将hexo部署到GitHub上 接着我们就可以将hexo生成的网页托管到GitHub上。 修改’_config.yml’文件 打开博客根目录下的’_config.yml’配置文件，修改最后一行的配置： 1234deploy: type: git repository: https://github.com/hanabiicros/hanabiicros.github.io branch: master ‘repository’的位置填写自己的github地址即可。这样通过git命令上传的文件就会放到你的仓库中 安装deploy-git 需要先安装部署的命令，才能用’git d’上传到’GitHub’ 1npm install hexo-deployer-git --save 然后执行如下命令： 123hexo chexo ghexo d ‘hexo c’即清除命令，这个命令还是挺好用的，如果你遇到一般的小bug，那就’hexo c’然后再执行。’hexo g’即生成静态网页，’hexo d’部署文章。若提示’Deploy done:git’即操作成功。之后就能在’yourname.github.io’网站上看到你的博客。 写文章并发布 完成了上述基本步骤之后，你如果就用默认的主题的话，那么你就可以开始撰写你的第一个’纯文本’博客了。之所以说是’纯文本’，是因为还有许多hexo插件没有介绍。具体内容将放在下一篇进行具体说明。 现在你需要做的就是在博客的根目录下输入 1hexo new post \"arctile title\" 新建一篇文章，然后在博客根目录下的’source_posts’的目录下多了一个’xxx.md’的文件，这就是你刚刚创建的。接着就可以进入’vscode’中编辑’markdown’文件了。编写完后执行固定的这三个命令’hexo c’、’hexo g’、’hexo d’。你也可以在提交前先进行本地预览，输入 1hexo server 到这里一个最基本的博客就搭建完毕了。下一篇会对里面的具体配置内容进行相关介绍，并进行个性化定制！","link":"/archives/5ec59427/"}],"tags":[{"name":"Hexo","slug":"Hexo","link":"/tags/Hexo/"},{"name":"Blog","slug":"Blog","link":"/tags/Blog/"},{"name":"Markdown","slug":"Markdown","link":"/tags/Markdown/"},{"name":"前端","slug":"前端","link":"/tags/%E5%89%8D%E7%AB%AF/"},{"name":"HTML","slug":"HTML","link":"/tags/HTML/"},{"name":"Github","slug":"Github","link":"/tags/Github/"}],"categories":[{"name":"技术","slug":"技术","link":"/categories/%E6%8A%80%E6%9C%AF/"},{"name":"面试","slug":"面试","link":"/categories/%E9%9D%A2%E8%AF%95/"}]}